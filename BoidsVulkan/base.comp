#version 450
#define M_PI 3.1415926535897932384626433832795
layout(local_size_x=1024, local_size_y=1, local_size_z = 1) in;
layout(binding = 0, r32f) uniform readonly image2D inputImage;
struct Particle {
    vec2 pos;
    vec2 offset;
    vec4 col;
};

layout(std430, binding = 1) buffer Points {
    Particle data[];
};

layout(std430, binding = 2) buffer Integrator {
    float timesteps[];
};

layout(push_constant) uniform PushConstants {
    int N;
    float delta;
    float ecc;
    float T;
}push;

float sampleE(vec2 uv) {
    ivec2 texSize = imageSize(inputImage);
    ivec2 texelPos = ivec2(floor(uv*texSize));
    float v00 = imageLoad(inputImage, texelPos).r;
    return v00;
}

vec2 dT(vec2 p) {
    return vec2(p.x, 1.0);
}

vec2 dU(vec2 q) {
    float M = q.y;
    if(M > 2*M_PI) {
        M = mod(M, 2*M_PI);
    }
    float z = q.x;
    vec2 uv = vec2(push.ecc, M/(2.0*M_PI));
    float E = 2*M_PI*sampleE(uv);
    E = M + push.ecc*sin(E);

    float r = 1-push.ecc*cos(E);
    r = sqrt(r*r+z*z);
    return vec2(z/(r*r*r),0);
}

void main() {
    if(gl_GlobalInvocationID.x >= push.N)
    return;
    vec2 zv = data[gl_GlobalInvocationID.x].pos;
    vec2 p = vec2(zv.y, 0);
    vec2 q = vec2(zv.x, push.T);
    float delta = push.delta;
    for(int i = 0; i<timesteps.length(); i+=2) {
        q = q + delta*timesteps[i]*dT(p);
        p = p - delta*timesteps[i+1]*dU(q);
    }
    data[gl_GlobalInvocationID.x].pos = vec2(q.x, p.x);
    data[gl_GlobalInvocationID.x].offset = vec2(q.x, p.x) - zv;
}